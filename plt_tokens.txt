Function  1  function
Identifier  1  isPrime
Open_Parenthesis  1  (
Identifier  1  n
Close_Parenthesis  1  )
Open_Brace  1  {
If  2  if
Open_Parenthesis  2  (
Identifier  2  n
Equal  2  ==
Integer  2  2
Close_Parenthesis  2  )
Return  2  return
True  2  true
Semicolon  2  ;
Else  3  else
If  3  if
Open_Parenthesis  3  (
Identifier  3  n
Lesser  3  <
Integer  3  2
Binary_Or  3  ||
Identifier  3  n
Remainder  3  %
Integer  3  2
Equal  3  ==
Integer  3  0
Close_Parenthesis  3  )
Return  3  return
False  3  false
Semicolon  3  ;
For  4  for
Open_Parenthesis  4  (
Identifier  4  d
Assigment  4  =
Integer  4  3
Semicolon  4  ;
Identifier  4  d
Multiplication  4  *
Identifier  4  d
Lesser_Equal  4  <=
Identifier  4  n
Semicolon  4  ;
Identifier  4  d
Assigment  4  =
Identifier  4  d
Addition  4  +
Integer  4  2
Close_Parenthesis  4  )
Open_Brace  4  {
If  5  if
Open_Parenthesis  5  (
Identifier  5  n
Remainder  5  %
Identifier  5  d
Equal  5  ==
Integer  5  0
Close_Parenthesis  5  )
Open_Brace  5  {
Return  6  return
False  6  false
Semicolon  6  ;
Close_Brace  7  }
Close_Brace  8  }
Close_Brace  9  }
Function  10  function
Identifier  10  main
Open_Parenthesis  10  (
Close_Parenthesis  10  )
Open_Brace  10  {
Identifier  11  n
Assigment  11  =
Identifier  11  input_int
Open_Parenthesis  11  (
Close_Parenthesis  11  )
Semicolon  11  ;
For  12  for
Open_Parenthesis  12  (
Identifier  12  i
Assigment  12  =
Integer  12  0
Semicolon  12  ;
Identifier  12  i
Lesser_Equal  12  <=
Identifier  12  n
Subtraction  12  -
Integer  12  1
Semicolon  12  ;
Increment  12  ++
Identifier  12  i
Close_Parenthesis  12  )
Open_Brace  12  {
If  13  if
Open_Parenthesis  13  (
Identifier  13  isPrime
Open_Parenthesis  13  (
Identifier  13  i
Close_Parenthesis  13  )
Close_Parenthesis  13  )
Open_Brace  13  {
Identifier  14  output_int
Open_Parenthesis  14  (
Identifier  14  i
Close_Parenthesis  14  )
Semicolon  14  ;
Close_Brace  15  }
Close_Brace  16  }
Return  17  return
Integer  17  0
Semicolon  17  ;
Close_Brace  18  }
